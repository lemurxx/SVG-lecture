!function(g){var I={};function C(A){if(I[A])return I[A].exports;var B=I[A]={i:A,l:!1,exports:{}};return g[A].call(B.exports,B,B.exports,C),B.l=!0,B.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:A})},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=6)}({6:function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n__webpack_require__(7);\r\n__webpack_require__(8);\r\nvar text = "állj, álarc, alul, állás, állat, állomás, ballag, bal, billeg, bámul, belső, bólint, bölcső, csalán, Csilla, cseles, csaló, dallam, elem, ellenség, ellenőrző, előtt, felleg, fullad, felnőtt, gallér, galamb, Gabriella, Göncölszekér, Gellért, gyalu, hallotta, hol, hull, halk, holló, háló, halpikkely, hüllő, illat, Ilona, illik, istálló, jelez, jellemző, jelmez, jelvény, Jolán, Júlia, július, kamilla, kalap, kapcsoló, karol, kell, kellemes, kiáltás, kiállítás, kilenc, kilogramm, kolbász, költő, különben, Lilla, lila, madártoll, malom, megálló, meleg, mellett, mellény, nulla, nyílik, nyúlik, olló, palota, pillangó, pillanat, roller, sikál, szalag, szálló, szálloda, szitál, tollbamondás, tolvaj, váll, válogat, vasal, vélemény, világ, villa, villám, villog, víziló, zálog, ülés";\r\nvar $ = window.$;\r\n$(\'#source\').change(function () {\r\n    var text = $(\'#source\').val().replace(/\\.|\\!|\\:|\\(|\\)|\\,/g, \' \');\r\n    var arr = text.split(\' \').filter(function (w) { return w.length > 2; });\r\n    var wordsObj = _.groupBy(arr);\r\n    var wordsArr = [];\r\n    for (var w in wordsObj) {\r\n        wordsArr.push({\r\n            text: w,\r\n            size: wordsObj[w].length\r\n        });\r\n    }\r\n    Cloud.init(1, "body", wordsArr);\r\n});\r\nvar words = text.split(", ").map(function (w) {\r\n    return {\r\n        text: w,\r\n        size: Math.random() * 30\r\n    };\r\n});\r\nwindow.Cloud = (function () {\r\n    var zoomin = function (words) {\r\n        zoom += 0.1;\r\n        init(zoom, "body", words);\r\n    };\r\n    var zoomout = function () {\r\n        zoom -= 0.1;\r\n        init(zoom, "body", words);\r\n    };\r\n    var refresh = function () {\r\n        zoom = 1;\r\n        init(zoom, "body", words);\r\n    };\r\n    var zoom = 1;\r\n    var init = function (zoom, wrapperelement, source) {\r\n        $("#cloud").empty();\r\n        var width = $(wrapperelement).width();\r\n        var height = $(wrapperelement).height() * 0.8;\r\n        var words = source;\r\n        var sum = words.reduce(function (a, b) {\r\n            return a += b.size;\r\n        }, 0);\r\n        var length = words.length;\r\n        var corrector;\r\n        corrector = //determined by experiments only\r\n            Math.sqrt(length * 4) * 100;\r\n        words = words.map(function (el) {\r\n            return {\r\n                text: el.text,\r\n                size: el.size / sum * corrector * zoom\r\n            };\r\n        });\r\n        var sum2 = words.reduce(function (a, b) {\r\n            return a += b.size;\r\n        }, 0);\r\n        var fill = d3.scale.category20();\r\n        var layout = d3.layout.cloud()\r\n            .size([width, height])\r\n            .words(words)\r\n            .padding(2)\r\n            .rotate(function () {\r\n            return ~~(Math.random() * 2) * 90 - 45; //word rotation\r\n        })\r\n            .font("Impact")\r\n            .fontSize(function (d) {\r\n            return d.size;\r\n        })\r\n            .on("end", draw);\r\n        layout.start();\r\n        function draw(words) {\r\n            d3.select("#cloud").append("svg").attr("viewBox", "0,0," + width + "," + height)\r\n                .attr("width", layout.size()[0])\r\n                .attr("height", layout.size()[1])\r\n                .attr("preserveAspectRatio", "xMinYMin")\r\n                .append("g")\r\n                .attr("transform", "translate(" + layout.size()[0] / 2 + "," + layout.size()[1] / 2 + ")")\r\n                .selectAll("text")\r\n                .data(words)\r\n                .enter().append("text")\r\n                .transition()\r\n                .style("font-size", function (d) {\r\n                return d.size + "px";\r\n            })\r\n                .style("font-family", "Impact")\r\n                .style("fill", function (d, i) {\r\n                return fill(i);\r\n            })\r\n                .attr("text-anchor", "middle")\r\n                .attr("transform", function (d) {\r\n                return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";\r\n            })\r\n                .text(function (d) {\r\n                return d.text;\r\n            });\r\n            layout.stop();\r\n            $("svg").removeAttr("width").removeAttr("height");\r\n            $("svg").attr("width", "100%").attr("height", "100%");\r\n            if ($("text").length < length) {\r\n                $("#warn").removeClass("hidden");\r\n            }\r\n            else {\r\n                $("#warn").addClass("hidden");\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        init: init,\r\n        zoomin: zoomin,\r\n        zoomout: zoomout,\r\n        refresh: refresh\r\n    };\r\n})();\r\n$("#source").val("\\n   A Csillagok h\\u00E1bor\\u00FAja (Star Wars) eredetileg egy \\u0171ropera-filmsorozat, amely George Lucas filmrendez\\u0151 \\u00F6tletein alapszik. A filmek cselekm\\u00E9nye a \\u201Er\\u00E9ges-r\\u00E9gen, egy messzi-messzi galaxisban\\u2026\\u201D \\u00E9l\\u0151 szerepl\\u0151k t\\u00F6rt\\u00E9net\\u00E9t mes\\u00E9li el.\\n   Az els\\u0151 filmet 1977-ben mutatt\\u00E1k be a mozik Csillagok h\\u00E1bor\\u00FAja c\\u00EDmmel (1981-ben Csillagok h\\u00E1bor\\u00FAja IV: Egy \\u00FAj rem\\u00E9ny-re v\\u00E1ltozott a c\\u00EDme[1][2]), a film gyorsan a popkult\\u00FAra megker\\u00FClhetetlen klasszikus\\u00E1v\\u00E1 v\\u00E1lt, amely sz\\u00E1mos m\\u00E1s filmre \\u00E9s tudom\\u00E1nyos-fantasztikus m\\u0171re volt hat\\u00E1ssal. Az els\\u0151 filmet k\\u00E9t sikeres folytat\\u00E1s k\\u00F6vette, az 1980-ban bemutatott A Birodalom visszav\\u00E1g, illetve az 1983-as A Jedi visszat\\u00E9r, ez a h\\u00E1rom film alkotja az eredeti Star Wars tril\\u00F3gi\\u00E1t. Az eredeti tril\\u00F3gi\\u00E1t 1999 \\u00E9s 2005 k\\u00F6z\\u00F6tt egy el\\u0151zm\\u00E9ny tril\\u00F3gia k\\u00F6vette, amely megoszt\\u00F3 reakci\\u00F3kat v\\u00E1ltott ki mind a rajong\\u00F3kb\\u00F3l, mind a kritikusokb\\u00F3l. 2015-ben A Jedi visszat\\u00E9r esem\\u00E9nyei ut\\u00E1n j\\u00E1tsz\\u00F3d\\u00F3 \\u00FAjabb tril\\u00F3gia vette kezdet\\u00E9t Az \\u00E9bred\\u0151 Er\\u0151 c\\u00EDm\\u0171 epiz\\u00F3ddal. Az els\\u0151 nyolc film t\\u00F6bb Oscar-d\\u00EDj jel\\u00F6l\\u00E9st is kapott, \\u00E1m d\\u00EDjat csak az els\\u0151 k\\u00E9t film nyert. A filmek hatalmas sikernek bizonyultak, az \\u00F6sszes bemutatott film egy\\u00FCttv\\u00E9ve 8,5 milli\\u00E1rd doll\\u00E1r bev\\u00E9telt termelt a mozik kassz\\u00E1in\\u00E1l,[3] ezzel a Star Wars m\\u00E1sodik legj\\u00F6vedelmez\\u0151bb filmsorozat a Marvel Cinematic Universe filmjei m\\u00F6g\\u00F6tt.[4] Eddig k\\u00E9t antol\\u00F3gia film k\\u00E9sz\\u00FClt el, ezek a Zsiv\\u00E1ny Egyes (2016) \\u00E9s a Solo: Egy Star Wars-t\\u00F6rt\\u00E9net (2018).\\n   Napjainkra a filmeken k\\u00EDv\\u00FCl k\\u00F6nyvek, telev\\u00EDzi\\u00F3s sorozatok, sz\\u00E1m\\u00EDt\\u00F3g\\u00E9pes \\u00E9s videoj\\u00E1t\\u00E9kok, t\\u00E9maparki l\\u00E1tnival\\u00F3k, vid\\u00E1mparkok, k\\u00E9preg\\u00E9nyek egy\\u00FCttesen birtokolj\\u00E1k a Star Wars nevet, ezzel is hozz\\u00E1j\\u00E1rulva a filmek vil\\u00E1g\\u00E1nak fejl\\u0151d\\u00E9s\\u00E9hez, b\\u0151v\\u00FCl\\u00E9s\\u00E9hez. A filmsorozat birtokolja a legsikeresebb filmes merchandising Guinness-rekordj\\u00E1t. 2015-ben a Star Wars m\\u00E1rka \\u00E9rt\\u00E9k\\u00E9t 42 milli\\u00E1rd doll\\u00E1rra becs\\u00FClt\\u00E9k.\\n   A \\u201Ekorszellemt\\u0151l\\u201D, amelyben Lucas feln\\u0151tt, ez egy\\u00E1ltal\\u00E1n nem volt idegen: a hatvanas-hetvenes \\u00E9vekt\\u0151l kezdve megfigyelhet\\u0151 a term\\u00E9szettudom\\u00E1nyos optimizmus hanyatl\\u00E1sa, s\\u0151t a tudom\\u00E1nyelleness\\u00E9g (ez sz\\u00E1mos okra vezethet\\u0151 vissza, a legnyilv\\u00E1nval\\u00F3bb, de k\\u00F6zel sem biztosan az egyetlen a hidegh\\u00E1bor\\u00FAs korszak l\\u00E9gk\\u00F6re, amelyben az emberis\\u00E9g k\\u00E9t egym\\u00E1st\\u00F3l rettegve \\u00E9l\\u0151 frakci\\u00F3ra oszolva a cs\\u00FAcstechnol\\u00F3gi\\u00E1s atomfegyverek \\u00E1rny\\u00E9k\\u00E1ban \\u00E9lte \\u00E9let\\u00E9t, amelyek egyszerre garant\\u00E1lt\\u00E1k a k\\u00E9tes b\\u00E9k\\u00E9t a k\\u00F6lcs\\u00F6n\\u00F6s elrettent\\u00E9s jegy\\u00E9ben, illetve a tot\\u00E1lis vil\\u00E1gpusztul\\u00E1st, ha az el\\u0151bbi v\\u00E9letlen\\u00FCl m\\u00E9gse m\\u0171k\\u00F6dne). A Csillagok h\\u00E1bor\\u00FAj\\u00E1val Lucas nemcsak kil\\u00FAgozta a sci-fi m\\u0171fajb\\u00F3l egyik l\\u00E9nyeg\\u00E9t, a term\\u00E9szettudom\\u00E1nyok ir\\u00E1nti \\u00E9rdekl\\u0151d\\u00E9st, de tov\\u00E1bb is ment: a legels\\u0151k\\u00E9nt elk\\u00E9sz\\u00EDtett filmben, amit k\\u00E9s\\u0151bb \\u00DAj rem\\u00E9nynek c\\u00EDmeztek, a gonosz birodalma \\u00E1ltal elk\\u00E9sz\\u00EDtett bolyg\\u00F3puszt\\u00EDt\\u00F3 szuperfegyver, a Hal\\u00E1lcsillag k\\u00E9pviseli a tudom\\u00E1nyos-technol\\u00F3giai fejl\\u0151d\\u00E9s cs\\u00FAcs\\u00E1t, amelyt\\u0151l m\\u00E9g a film leggonoszabb szerepl\\u0151je, Darth Vader is undorodik.\\n   filmsorozat kezd\\u0151darabj\\u00E1t, a Csillagok h\\u00E1bor\\u00FAj\\u00E1t 1977. m\\u00E1jus 25-\\u00E9n mutatt\\u00E1k be, majd ezt k\\u00F6vet\\u0151en elk\\u00E9sz\\u00FClt k\\u00E9t folytat\\u00E1sa, A Birodalom visszav\\u00E1g (1980. m\\u00E1jus 21.), majd A Jedi visszat\\u00E9r (1983. m\\u00E1jus 25.) is.\\n\\n   Az els\\u0151 r\\u00E9sz bemutat\\u00E1s\\u00E1nak huszadik \\u00E9vfordul\\u00F3j\\u00E1ra 1997-ben a IV.\\u2013VI. epiz\\u00F3dokat \\u00FAjra megjelentett\\u00E9k (el\\u0151sz\\u00F6r a mozikban, ut\\u00E1na VHS kazett\\u00E1n), Special Editions c\\u00EDmen. Ekkor ugyanis a technika m\\u00E1r lehet\\u0151v\\u00E9 tette olyan speci\\u00E1lis effektusok alkalmaz\\u00E1s\\u00E1t is, amelyek a filmek forgat\\u00E1s\\u00E1nak idej\\u00E9n m\\u00E9g nem voltak lehets\\u00E9gesek. A film feljav\\u00EDt\\u00E1s\\u00E1n k\\u00EDv\\u00FCl George Lucas n\\u00E9h\\u00E1ny effektust digit\\u00E1lisan \\u00FAjra feldolgozott (digit\\u00E1lis Jabba \\u00E9s egy kicsiny, de fontos jav\\u00EDt\\u00E1s a Han Solo \\u00E9s Greedo k\\u00F6zti harcot bemutat\\u00F3 filmr\\u00E9szletben). Ezenk\\u00EDv\\u00FCl 2004. szeptember 21-\\u00E9n ism\\u00E9t megjelent az eredeti tril\\u00F3gi\\u00E1nak egy \\u00FAjabb kiad\\u00E1sa, amelyben szint\\u00E9n tal\\u00E1lhatunk n\\u00E9h\\u00E1ny v\\u00E1ltoztat\\u00E1st. A legjelent\\u0151sebb \\u00E9s legvitatottabb v\\u00E1ltoztat\\u00E1s az volt, amikor a Csillagok h\\u00E1bor\\u00FAja VI: A jedi visszat\\u00E9r c\\u00EDm\\u0171 r\\u00E9sz utols\\u00F3 jelenet\\u00E9ben Lucas lecser\\u00E9lte az Anakin Skywalkert j\\u00E1tsz\\u00F3 Sebastian Shaw alakj\\u00E1t Hayden Christensen\\u00E9re.\\n   \\n   1999-ben ker\\u00FClt mozikba a rajong\\u00F3k \\u00E1ltal v\\u00E1rva-v\\u00E1rt epiz\\u00F3d a Star Wars I. r\\u00E9sz - Balj\\u00F3s \\u00C1rnyak, mely az eredeti tril\\u00F3gia cselekm\\u00E9nye el\\u0151tt k\\u00F6r\\u00FClbel\\u00FCl 30 \\u00E9vvel j\\u00E1tsz\\u00F3dik. Ezt k\\u00F6vette tov\\u00E1bbi k\\u00E9t folytat\\u00E1s, a Star Wars II. r\\u00E9sz - A kl\\u00F3nok t\\u00E1mad\\u00E1sa (2002) \\u00E9s a Star Wars III. r\\u00E9sz - A Sith-ek bossz\\u00FAja (2005).\\n   \\n   2011-ben megjelent a hat film bluray kiad\\u00E1sa, amely szint\\u00E9n tartalmazott kisebb m\\u00F3dos\\u00EDt\\u00E1sokat, a klasszikus \\u00E9s az el\\u0151zm\\u00E9nytril\\u00F3gi\\u00E1ban egyar\\u00E1nt (ut\\u00F3bbiban p\\u00E9ld\\u00E1ul az I. r\\u00E9sz Yoda-b\\u00E1bfigur\\u00E1j\\u00E1t sz\\u00E1m\\u00EDt\\u00F3g\\u00E9pes grafik\\u00E1ra cser\\u00E9lt\\u00E9k).\\n   \\n   2012-ben a Disney felv\\u00E1s\\u00E1rolta a Lucasfilmet, amely a sorozat jogaival rendelkezett, majd 2013 m\\u00E1jus\\u00E1ban Kathleen Kennedy, a Lucasfilm eln\\u00F6ke bejelentette, hogy a k\\u00F6vetkez\\u0151 Star Wars-filmet \\u2013 a sorozat hetedik r\\u00E9sz\\u00E9t, Az \\u00E9bred\\u0151 Er\\u0151t \\u2013 2014-ben kezdik forgatni J. J. Abrams ir\\u00E1ny\\u00EDt\\u00E1s\\u00E1val (a VII. r\\u00E9sz forgat\\u00F3k\\u00F6nyv\\u00E9t a rendez\\u0151 Lawrence Kasdan, valamint Michael Arndt \\u00EDrta), a filmet 2015 december\\u00E9ben mutattak be a mozikban. A folytat\\u00E1s tril\\u00F3gia m\\u00E1sodik r\\u00E9sz\\u00E9t a Rian Johnson \\u00E1ltal \\u00EDrt \\u00E9s rendezett Az utols\\u00F3 Jediket 2017. december\\u00E9ben mutatt\\u00E1k be a mozik. A tril\\u00F3gia befejez\\u0151 epiz\\u00F3dja, melyet J. J. Abrams rendez el\\u0151rel\\u00E1that\\u00F3lag 2019 december\\u00E9ben ker\\u00FCl a mozikba.[15]\\n   \\n   A folytat\\u00E1s tril\\u00F3gi\\u00E1val egy id\\u0151ben a Lucasfilm bejelentette, hogy Az \\u00E9bred\\u0151 Er\\u0151 bemutat\\u00E1sa ut\\u00E1n \\u00E9vente olyan \\u00FAj filmek ker\\u00FCln\\u00E9nek a mozikba, melyek m\\u00E1r nem a Skywalker-sorozat folytat\\u00E1sai lenn\\u00E9nek, hanem a Star Wars-univerzum egy-egy h\\u0151s\\u00E9nek t\\u00F6rt\\u00E9nete ker\\u00FClne a filmek k\\u00F6z\\u00E9ppontj\\u00E1ba.[16][17] Az els\\u0151 ilyen \\u00F6n\\u00E1ll\\u00F3 film a 2016 december\\u00E9ben bemutatott Zsiv\\u00E1ny Egyes volt, amely a III. \\u00E9s a IV. epiz\\u00F3d k\\u00F6z\\u00F6tt j\\u00E1tsz\\u00F3dik. Ezt k\\u00F6vette 2018. m\\u00E1jus\\u00E1ban a Ron Howard \\u00E1ltal rendezett Solo, amely Han Solo fiatalkor\\u00E1t mutatja be.")\r\n    .trigger(\'change\');\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},7:function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvd29yZC1jbG91ZC5sZXNzPzcyMmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3R5bGUvd29yZC1jbG91ZC5sZXNzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n")},8:function(module,exports){eval('// Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/\r\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\r\n(function() {\r\n\r\n    //if (typeof define === "function" && define.amd) define(["d3"], cloud);\r\n    //else \r\n    cloud(this.d3);\r\n    \r\n    function cloud(d3) {\r\n      d3.layout.cloud = function cloud() {\r\n        var size = [256, 256],\r\n            text = cloudText,\r\n            font = cloudFont,\r\n            fontSize = cloudFontSize,\r\n            fontStyle = cloudFontNormal,\r\n            fontWeight = cloudFontNormal,\r\n            rotate = cloudRotate,\r\n            padding = cloudPadding,\r\n            spiral = archimedeanSpiral,\r\n            words = [],\r\n            timeInterval = Infinity,\r\n            event = d3.dispatch("word", "end"),\r\n            timer = null,\r\n            random = Math.random,\r\n            cloud = {};\r\n    \r\n        cloud.start = function() {\r\n          var board = zeroArray((size[0] >> 5) * size[1]),\r\n              bounds = null,\r\n              n = words.length,\r\n              i = -1,\r\n              tags = [],\r\n              data = words.map(function(d, i) {\r\n                d.text = text.call(this, d, i);\r\n                d.font = font.call(this, d, i);\r\n                d.style = fontStyle.call(this, d, i);\r\n                d.weight = fontWeight.call(this, d, i);\r\n                d.rotate = rotate.call(this, d, i);\r\n                d.size = ~~fontSize.call(this, d, i);\r\n                d.padding = padding.call(this, d, i);\r\n                return d;\r\n              }).sort(function(a, b) { return b.size - a.size; });\r\n    \r\n          if (timer) clearInterval(timer);\r\n          timer = setInterval(step, 0);\r\n          step();\r\n    \r\n          return cloud;\r\n    \r\n          function step() {\r\n            var start = Date.now();\r\n            while (Date.now() - start < timeInterval && ++i < n && timer) {\r\n              var d = data[i];\r\n              d.x = (size[0] * (random() + .5)) >> 1;\r\n              d.y = (size[1] * (random() + .5)) >> 1;\r\n              cloudSprite(d, data, i);\r\n              if (d.hasText && place(board, d, bounds)) {\r\n                tags.push(d);\r\n                event.word(d);\r\n                if (bounds) cloudBounds(bounds, d);\r\n                else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];\r\n                // Temporary hack\r\n                d.x -= size[0] >> 1;\r\n                d.y -= size[1] >> 1;\r\n              }\r\n            }\r\n            if (i >= n) {\r\n              cloud.stop();\r\n              event.end(tags, bounds);\r\n            }\r\n          }\r\n        }\r\n    \r\n        cloud.stop = function() {\r\n          if (timer) {\r\n            clearInterval(timer);\r\n            timer = null;\r\n          }\r\n          return cloud;\r\n        };\r\n    \r\n        function place(board, tag, bounds) {\r\n          var perimeter = [{x: 0, y: 0}, {x: size[0], y: size[1]}],\r\n              startX = tag.x,\r\n              startY = tag.y,\r\n              maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\r\n              s = spiral(size),\r\n              dt = random() < .5 ? 1 : -1,\r\n              t = -dt,\r\n              dxdy,\r\n              dx,\r\n              dy;\r\n              \r\n              counter = 0;\r\n    \r\n          while (dxdy = s(t += dt)) {\r\n            dx = ~~dxdy[0];\r\n            dy = ~~dxdy[1];\r\n    \r\n            //if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;\r\n     if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta || counter > 100000) {\r\n               \r\n                break;\r\n            }\r\n                \r\n            tag.x = startX + dx;\r\n            tag.y = startY + dy;\r\n    \r\n            if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\r\n                tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\r\n            // TODO only check for collisions within current bounds.\r\n            if (!bounds || !cloudCollide(tag, board, size[0])) {\r\n              if (!bounds || collideRects(tag, bounds)) {\r\n                var sprite = tag.sprite,\r\n                    w = tag.width >> 5,\r\n                    sw = size[0] >> 5,\r\n                    lx = tag.x - (w << 4),\r\n                    sx = lx & 0x7f,\r\n                    msx = 32 - sx,\r\n                    h = tag.y1 - tag.y0,\r\n                    x = (tag.y + tag.y0) * sw + (lx >> 5),\r\n                    last;\r\n                for (var j = 0; j < h; j++) {\r\n                  last = 0;\r\n                  for (var i = 0; i <= w; i++) {\r\n                    board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\r\n                  }\r\n                  x += sw;\r\n                }\r\n                delete tag.sprite;\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n    \r\n        cloud.timeInterval = function(_) {\r\n          return arguments.length ? (timeInterval = _ == null ? Infinity : _, cloud) : timeInterval;\r\n        };\r\n    \r\n        cloud.words = function(_) {\r\n          return arguments.length ? (words = _, cloud) : words;\r\n        };\r\n    \r\n        cloud.size = function(_) {\r\n          return arguments.length ? (size = [+_[0], +_[1]], cloud) : size;\r\n        };\r\n    \r\n        cloud.font = function(_) {\r\n          return arguments.length ? (font = d3.functor(_), cloud) : font;\r\n        };\r\n    \r\n        cloud.fontStyle = function(_) {\r\n          return arguments.length ? (fontStyle = d3.functor(_), cloud) : fontStyle;\r\n        };\r\n    \r\n        cloud.fontWeight = function(_) {\r\n          return arguments.length ? (fontWeight = d3.functor(_), cloud) : fontWeight;\r\n        };\r\n    \r\n        cloud.rotate = function(_) {\r\n          return arguments.length ? (rotate = d3.functor(_), cloud) : rotate;\r\n        };\r\n    \r\n        cloud.text = function(_) {\r\n          return arguments.length ? (text = d3.functor(_), cloud) : text;\r\n        };\r\n    \r\n        cloud.spiral = function(_) {\r\n          return arguments.length ? (spiral = spirals[_] || _, cloud) : spiral;\r\n        };\r\n    \r\n        cloud.fontSize = function(_) {\r\n          return arguments.length ? (fontSize = d3.functor(_), cloud) : fontSize;\r\n        };\r\n    \r\n        cloud.padding = function(_) {\r\n          return arguments.length ? (padding = d3.functor(_), cloud) : padding;\r\n        };\r\n    \r\n        cloud.random = function(_) {\r\n          return arguments.length ? (random = _, cloud) : random;\r\n        };\r\n    \r\n        return d3.rebind(cloud, event, "on");\r\n      };\r\n    \r\n      function cloudText(d) {\r\n        return d.text;\r\n      }\r\n    \r\n      function cloudFont() {\r\n        return "serif";\r\n      }\r\n    \r\n      function cloudFontNormal() {\r\n        return "normal";\r\n      }\r\n    \r\n      function cloudFontSize(d) {\r\n        return Math.sqrt(d.value);\r\n      }\r\n    \r\n      function cloudRotate() {\r\n        return (~~(Math.random() * 6) - 3) * 30;\r\n      }\r\n    \r\n      function cloudPadding() {\r\n        return 1;\r\n      }\r\n    \r\n      // Fetches a monochrome sprite bitmap for the specified text.\r\n      // Load in batches for speed.\r\n      function cloudSprite(d, data, di) {\r\n        if (d.sprite) return;\r\n        c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\r\n        var x = 0,\r\n            y = 0,\r\n            maxh = 0,\r\n            n = data.length;\r\n        --di;\r\n        while (++di < n) {\r\n          d = data[di];\r\n          c.save();\r\n          c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;\r\n          var w = c.measureText(d.text + "m").width * ratio,\r\n              h = d.size << 1;\r\n          if (d.rotate) {\r\n            var sr = Math.sin(d.rotate * cloudRadians),\r\n                cr = Math.cos(d.rotate * cloudRadians),\r\n                wcr = w * cr,\r\n                wsr = w * sr,\r\n                hcr = h * cr,\r\n                hsr = h * sr;\r\n            w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;\r\n            h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\r\n          } else {\r\n            w = (w + 0x1f) >> 5 << 5;\r\n          }\r\n          if (h > maxh) maxh = h;\r\n          if (x + w >= (cw << 5)) {\r\n            x = 0;\r\n            y += maxh;\r\n            maxh = 0;\r\n          }\r\n          if (y + h >= ch) break;\r\n          c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\r\n          if (d.rotate) c.rotate(d.rotate * cloudRadians);\r\n          c.fillText(d.text, 0, 0);\r\n          if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);\r\n          c.restore();\r\n          d.width = w;\r\n          d.height = h;\r\n          d.xoff = x;\r\n          d.yoff = y;\r\n          d.x1 = w >> 1;\r\n          d.y1 = h >> 1;\r\n          d.x0 = -d.x1;\r\n          d.y0 = -d.y1;\r\n          d.hasText = true;\r\n          x += w;\r\n        }\r\n        var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\r\n            sprite = [];\r\n        while (--di >= 0) {\r\n          d = data[di];\r\n          if (!d.hasText) continue;\r\n          var w = d.width,\r\n              w32 = w >> 5,\r\n              h = d.y1 - d.y0;\r\n          // Zero the buffer\r\n          for (var i = 0; i < h * w32; i++) sprite[i] = 0;\r\n          x = d.xoff;\r\n          if (x == null) return;\r\n          y = d.yoff;\r\n          var seen = 0,\r\n              seenRow = -1;\r\n          for (var j = 0; j < h; j++) {\r\n            for (var i = 0; i < w; i++) {\r\n              var k = w32 * j + (i >> 5),\r\n                  m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;\r\n              sprite[k] |= m;\r\n              seen |= m;\r\n            }\r\n            if (seen) seenRow = j;\r\n            else {\r\n              d.y0++;\r\n              h--;\r\n              j--;\r\n              y++;\r\n            }\r\n          }\r\n          d.y1 = d.y0 + seenRow;\r\n          d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\r\n        }\r\n      }\r\n    \r\n      // Use mask-based collision detection.\r\n      function cloudCollide(tag, board, sw) {\r\n        sw >>= 5;\r\n        var sprite = tag.sprite,\r\n            w = tag.width >> 5,\r\n            lx = tag.x - (w << 4),\r\n            sx = lx & 0x7f,\r\n            msx = 32 - sx,\r\n            h = tag.y1 - tag.y0,\r\n            x = (tag.y + tag.y0) * sw + (lx >> 5),\r\n            last;\r\n        for (var j = 0; j < h; j++) {\r\n          last = 0;\r\n          for (var i = 0; i <= w; i++) {\r\n            if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))\r\n                & board[x + i]) return true;\r\n          }\r\n          x += sw;\r\n        }\r\n        return false;\r\n      }\r\n    \r\n      function cloudBounds(bounds, d) {\r\n        var b0 = bounds[0],\r\n            b1 = bounds[1];\r\n        if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\r\n        if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\r\n        if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\r\n        if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\r\n      }\r\n    \r\n      function collideRects(a, b) {\r\n        return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\r\n      }\r\n    \r\n      function archimedeanSpiral(size) {\r\n        var e = size[0] / size[1];\r\n        return function(t) {\r\n          return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\r\n        };\r\n      }\r\n    \r\n      function rectangularSpiral(size) {\r\n        var dy = 4,\r\n            dx = dy * size[0] / size[1],\r\n            x = 0,\r\n            y = 0;\r\n        return function(t) {\r\n          var sign = t < 0 ? -1 : 1;\r\n          // See triangular numbers: T_n = n * (n + 1) / 2.\r\n          switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\r\n            case 0:  x += dx; break;\r\n            case 1:  y += dy; break;\r\n            case 2:  x -= dx; break;\r\n            default: y -= dy; break;\r\n          }\r\n          return [x, y];\r\n        };\r\n      }\r\n    \r\n      // TODO reuse arrays?\r\n      function zeroArray(n) {\r\n        var a = [],\r\n            i = -1;\r\n        while (++i < n) a[i] = 0;\r\n        return a;\r\n      }\r\n    \r\n      var cloudRadians = Math.PI / 180,\r\n          cw = 1 << 11 >> 5,\r\n          ch = 1 << 11,\r\n          canvas,\r\n          ratio = 1;\r\n    \r\n      if (typeof document !== "undefined") {\r\n        canvas = document.createElement("canvas");\r\n        canvas.width = 1;\r\n        canvas.height = 1;\r\n        ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);\r\n        canvas.width = (cw << 5) / ratio;\r\n        canvas.height = ch / ratio;\r\n      } else {\r\n        // Attempt to use node-canvas.\r\n        canvas = new Canvas(cw << 5, ch);\r\n      }\r\n    \r\n      var c = canvas.getContext("2d"),\r\n          spirals = {\r\n            archimedean: archimedeanSpiral,\r\n            rectangular: rectangularSpiral\r\n          };\r\n      c.fillStyle = c.strokeStyle = "red";\r\n      c.textAlign = "center";\r\n    }\r\n    \r\n    })();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n')}});